#!/bin/bash

# kubctl-0x02 - Blue-Green Deployment Strategy Script
# Objective: Learn how to perform zero-downtime deployments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
BLUE_DEPLOYMENT="messaging-app-blue"
GREEN_DEPLOYMENT="messaging-app-green"
ACTIVE_SERVICE="messaging-app-active"
BLUE_SERVICE="messaging-app-blue"
GREEN_SERVICE="messaging-app-green"
NAMESPACE="default"
HEALTH_CHECK_PATH="/health/"
HEALTH_CHECK_TIMEOUT=30
SWITCH_TIMEOUT=60
ROLLBACK_THRESHOLD=3

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${PURPLE}==========================================${NC}"
    echo -e "${PURPLE}    $1${NC}"
    echo -e "${PURPLE}==========================================${NC}"
    echo ""
}

print_subheader() {
    echo -e "${CYAN}--- $1 ---${NC}"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    # Check kubectl
    if ! command_exists kubectl; then
        print_error "kubectl is not installed!"
        exit 1
    fi
    print_success "kubectl found: $(kubectl version --client --short)"
    
    # Check if cluster is accessible
    if ! kubectl cluster-info &> /dev/null; then
        print_error "Cannot connect to Kubernetes cluster!"
        exit 1
    fi
    print_success "Connected to Kubernetes cluster"
}

# Function to get current deployment status
get_current_status() {
    print_header "Current Deployment Status"
    
    print_subheader "Blue Deployment"
    kubectl get deployment $BLUE_DEPLOYMENT 2>/dev/null || print_warning "Blue deployment not found"
    
    print_subheader "Green Deployment"
    kubectl get deployment $GREEN_DEPLOYMENT 2>/dev/null || print_warning "Green deployment not found"
    
    print_subheader "Active Service"
    kubectl get service $ACTIVE_SERVICE 2>/dev/null || print_warning "Active service not found"
    
    print_subheader "All Pods"
    kubectl get pods -l app=messaging-app
}

# Function to deploy blue version
deploy_blue() {
    print_header "Deploying Blue Version"
    
    print_status "Applying blue deployment configuration..."
    kubectl apply -f blue_deployment.yaml
    
    if [ $? -eq 0 ]; then
        print_success "Blue deployment applied successfully!"
    else
        print_error "Failed to apply blue deployment!"
        exit 1
    fi
    
    # Wait for blue deployment to be ready
    print_status "Waiting for blue deployment to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/$BLUE_DEPLOYMENT
    
    print_success "Blue deployment is ready!"
}

# Function to deploy green version
deploy_green() {
    print_header "Deploying Green Version"
    
    print_status "Applying green deployment configuration..."
    kubectl apply -f green_deployment.yaml
    
    if [ $? -eq 0 ]; then
        print_success "Green deployment applied successfully!"
    else
        print_error "Failed to apply green deployment!"
        exit 1
    fi
    
    # Wait for green deployment to be ready
    print_status "Waiting for green deployment to be ready..."
    kubectl wait --for=condition=available --timeout=300s deployment/$GREEN_DEPLOYMENT
    
    print_success "Green deployment is ready!"
}

# Function to apply service configuration
apply_services() {
    print_header "Applying Service Configuration"
    
    print_status "Applying blue-green service configuration..."
    kubectl apply -f kubeservice.yaml
    
    if [ $? -eq 0 ]; then
        print_success "Service configuration applied successfully!"
    else
        print_error "Failed to apply service configuration!"
        exit 1
    fi
    
    # Wait for services to be ready
    print_status "Waiting for services to be ready..."
    sleep 10
}

# Function to check deployment health
check_deployment_health() {
    local deployment_name=$1
    local version=$2
    
    print_subheader "Health Check for $version Deployment ($deployment_name)"
    
    # Get pods for the deployment
    local pods=$(kubectl get pods -l app=messaging-app,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_error "No pods found for $version deployment!"
        return 1
    fi
    
    local healthy_pods=0
    local total_pods=0
    
    for pod in $pods; do
        total_pods=$((total_pods + 1))
        print_status "Checking pod: $pod"
        
        # Check if pod is running
        local pod_status=$(kubectl get pod $pod -o jsonpath='{.status.phase}')
        if [ "$pod_status" = "Running" ]; then
            print_success "Pod $pod is running"
            
            # Check pod logs for errors
            print_status "Checking logs for pod: $pod"
            local error_count=$(kubectl logs $pod --tail=50 2>/dev/null | grep -i "error\|exception\|fail" | wc -l)
            
            if [ $error_count -gt 0 ]; then
                print_warning "Found $error_count potential errors in pod $pod logs"
                kubectl logs $pod --tail=20 | grep -i "error\|exception\|fail" || true
            else
                print_success "No errors found in pod $pod logs"
                healthy_pods=$((healthy_pods + 1))
            fi
        else
            print_error "Pod $pod is not running (status: $pod_status)"
        fi
    done
    
    print_status "Health Summary for $version: $healthy_pods/$total_pods pods healthy"
    
    if [ $healthy_pods -eq $total_pods ]; then
        print_success "$version deployment is healthy!"
        return 0
    else
        print_error "$version deployment has health issues!"
        return 1
    fi
}

# Function to switch traffic to green
switch_to_green() {
    print_header "Switching Traffic to Green Version"
    
    # First, verify green deployment is healthy
    if ! check_deployment_health $GREEN_DEPLOYMENT "green"; then
        print_error "Green deployment is not healthy. Cannot switch traffic!"
        return 1
    fi
    
    print_status "Updating active service to point to green deployment..."
    
    # Update the active service selector to point to green
    kubectl patch service $ACTIVE_SERVICE -p '{"spec":{"selector":{"version":"green"}}}'
    
    if [ $? -eq 0 ]; then
        print_success "Traffic switched to green version successfully!"
    else
        print_error "Failed to switch traffic to green version!"
        return 1
    fi
    
    # Wait for the change to take effect
    print_status "Waiting for traffic switch to take effect..."
    sleep 10
    
    # Verify the switch
    local current_selector=$(kubectl get service $ACTIVE_SERVICE -o jsonpath='{.spec.selector.version}')
    if [ "$current_selector" = "green" ]; then
        print_success "Traffic switch verified! Active service now points to green version."
    else
        print_error "Traffic switch verification failed!"
        return 1
    fi
}

# Function to switch traffic back to blue (rollback)
switch_to_blue() {
    print_header "Rolling Back to Blue Version"
    
    print_status "Updating active service to point to blue deployment..."
    
    # Update the active service selector to point to blue
    kubectl patch service $ACTIVE_SERVICE -p '{"spec":{"selector":{"version":"blue"}}}'
    
    if [ $? -eq 0 ]; then
        print_success "Traffic switched back to blue version successfully!"
    else
        print_error "Failed to switch traffic back to blue version!"
        return 1
    fi
    
    # Wait for the change to take effect
    print_status "Waiting for rollback to take effect..."
    sleep 10
    
    # Verify the rollback
    local current_selector=$(kubectl get service $ACTIVE_SERVICE -o jsonpath='{.spec.selector.version}')
    if [ "$current_selector" = "blue" ]; then
        print_success "Rollback verified! Active service now points to blue version."
    else
        print_error "Rollback verification failed!"
        return 1
    fi
}

# Function to monitor deployment
monitor_deployment() {
    local deployment_name=$1
    local version=$2
    local duration=${3:-60}
    
    print_header "Monitoring $version Deployment for ${duration}s"
    
    local start_time=$(date +%s)
    local end_time=$((start_time + duration))
    local error_count=0
    
    while [ $(date +%s) -lt $end_time ]; do
        print_status "Monitoring $version deployment... ($(($(date +%s) - start_time))s elapsed"
        
        # Check pod status
        local pods=$(kubectl get pods -l app=messaging-app,version=$version -o jsonpath='{.items[*].metadata.name}')
        
        for pod in $pods; do
            # Check for recent errors in logs
            local recent_errors=$(kubectl logs $pod --since=1m 2>/dev/null | grep -i "error\|exception\|fail" | wc -l)
            
            if [ $recent_errors -gt 0 ]; then
                error_count=$((error_count + recent_errors))
                print_warning "Found $recent_errors new errors in pod $pod"
                kubectl logs $pod --since=1m | grep -i "error\|exception\|fail" | tail -5 || true
            fi
        done
        
        # Check if error threshold is exceeded
        if [ $error_count -ge $ROLLBACK_THRESHOLD ]; then
            print_error "Error threshold exceeded ($error_count >= $ROLLBACK_THRESHOLD). Initiating rollback..."
            switch_to_blue
            return 1
        fi
        
        sleep 10
    done
    
    print_success "$version deployment monitoring completed. Total errors: $error_count"
    return 0
}

# Function to perform full blue-green deployment
perform_blue_green_deployment() {
    print_header "Performing Full Blue-Green Deployment"
    
    # Deploy blue version
    deploy_blue
    
    # Deploy green version
    deploy_green
    
    # Apply services
    apply_services
    
    # Verify both deployments are healthy
    print_header "Verifying Deployments"
    
    if ! check_deployment_health $BLUE_DEPLOYMENT "blue"; then
        print_error "Blue deployment health check failed!"
        exit 1
    fi
    
    if ! check_deployment_health $GREEN_DEPLOYMENT "green"; then
        print_error "Green deployment health check failed!"
        exit 1
    fi
    
    # Switch traffic to green
    if ! switch_to_green; then
        print_error "Failed to switch traffic to green version!"
        exit 1
    fi
    
    # Monitor green deployment
    if ! monitor_deployment $GREEN_DEPLOYMENT "green" 120; then
        print_error "Green deployment monitoring failed! Rollback completed."
        exit 1
    fi
    
    print_success "Blue-green deployment completed successfully!"
    print_status "Green version is now serving production traffic"
}

# Function to show deployment logs
show_logs() {
    local deployment_name=$1
    local version=$2
    local lines=${3:-50}
    
    print_header "Logs for $version Deployment ($deployment_name)"
    
    local pods=$(kubectl get pods -l app=messaging-app,version=$version -o jsonpath='{.items[*].metadata.name}')
    
    if [ -z "$pods" ]; then
        print_warning "No pods found for $version deployment"
        return
    fi
    
    for pod in $pods; do
        print_subheader "Logs from pod: $pod"
        echo "----------------------------------------"
        kubectl logs $pod --tail=$lines
        echo ""
    done
}

# Function to cleanup deployments
cleanup() {
    print_header "Cleanup"
    
    print_status "Removing blue deployment..."
    kubectl delete -f blue_deployment.yaml --ignore-not-found=true
    
    print_status "Removing green deployment..."
    kubectl delete -f green_deployment.yaml --ignore-not-found=true
    
    print_status "Removing services..."
    kubectl delete -f kubeservice.yaml --ignore-not-found=true
    
    print_success "Cleanup completed!"
}

# Function to show help
show_help() {
    echo "kubctl-0x02 - Blue-Green Deployment Strategy Script"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  (no args)  Full blue-green deployment"
    echo "  blue        Deploy blue version only"
    echo "  green       Deploy green version only"
    echo "  services    Apply service configuration"
    echo "  switch      Switch traffic to green version"
    echo "  rollback    Rollback to blue version"
    echo "  monitor     Monitor deployment health"
    echo "  status      Show current deployment status"
    echo "  logs        Show deployment logs"
    echo "  cleanup     Remove all deployments and services"
    echo "  help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0           # Run full blue-green deployment"
    echo "  $0 blue      # Deploy blue version only"
    echo "  $0 switch    # Switch traffic to green"
    echo "  $0 monitor   # Monitor green deployment"
}

# Main execution
main() {
    print_header "Blue-Green Deployment Strategy"
    
    # Check prerequisites
    check_prerequisites
    
    # Perform full deployment
    perform_blue_green_deployment
    
    print_success "Blue-green deployment strategy completed successfully!"
    print_status "Use 'kubectl get pods -l app=messaging-app' to monitor pods"
    print_status "Use 'kubectl get services' to check service status"
}

# Handle command line arguments
case "${1:-}" in
    "blue")
        check_prerequisites
        deploy_blue
        ;;
    "green")
        check_prerequisites
        deploy_green
        ;;
    "services")
        check_prerequisites
        apply_services
        ;;
    "switch")
        check_prerequisites
        switch_to_green
        ;;
    "rollback")
        check_prerequisites
        switch_to_blue
        ;;
    "monitor")
        check_prerequisites
        if [ -n "$2" ]; then
            monitor_deployment $GREEN_DEPLOYMENT "green" $2
        else
            monitor_deployment $GREEN_DEPLOYMENT "green"
        fi
        ;;
    "status")
        check_prerequisites
        get_current_status
        ;;
    "logs")
        check_prerequisites
        if [ -n "$2" ] && [ "$2" = "green" ]; then
            show_logs $GREEN_DEPLOYMENT "green"
        else
            show_logs $BLUE_DEPLOYMENT "blue"
            echo ""
            show_logs $GREEN_DEPLOYMENT "green"
        fi
        ;;
    "cleanup")
        cleanup
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    "")
        main
        ;;
    *)
        print_error "Unknown command: $1"
        show_help
        exit 1
        ;;
esac
