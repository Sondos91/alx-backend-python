apiVersion: v1
kind: ConfigMap
metadata:
  name: django-config-blue
  labels:
    app: messaging-app
    version: blue
data:
  DEBUG: "False"
  DJANGO_SETTINGS_MODULE: "messaging_app.settings"
  MYSQL_HOST: "mysql-service"
  MYSQL_PORT: "3306"
  MYSQL_DATABASE: "messaging_db"
  MYSQL_USER: "messaging_user"
---
apiVersion: v1
kind: Secret
metadata:
  name: django-secret-blue
  labels:
    app: messaging-app
    version: blue
type: Opaque
data:
  SECRET_KEY: "YOUR_SECRET_KEY_BASE64_ENCODED_HERE"  # Replace with actual base64 encoded secret
  MYSQL_PASSWORD: "YOUR_MYSQL_PASSWORD_BASE64_ENCODED_HERE"  # Replace with actual base64 encoded password
  MYSQL_ROOT_PASSWORD: "YOUR_ROOT_PASSWORD_BASE64_ENCODED_HERE"  # Replace with actual base64 encoded root password
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: messaging-app-blue
  labels:
    app: messaging-app
    version: blue
    environment: production
spec:
  replicas: 2
  selector:
    matchLabels:
      app: messaging-app
      version: blue
      template:
      metadata:
        labels:
          app: messaging-app
          version: blue
          environment: production
    spec:
      containers:
      - name: messaging-app
        image: messaging-app:2.0  # Updated to version 2.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
        env:
        - name: DEBUG
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: DEBUG
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: django-secret-blue
              key: SECRET_KEY
        - name: DJANGO_SETTINGS_MODULE
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: DJANGO_SETTINGS_MODULE
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secret-blue
              key: MYSQL_PASSWORD
        - name: MYSQL_HOST
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_HOST
        - name: MYSQL_PORT
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_PORT
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 10"]
---
apiVersion: v1
kind: Service
metadata:
  name: messaging-app-service
  labels:
    app: messaging-app
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: messaging-app
    version: blue
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-db
  labels:
    app: mysql-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql-db
  template:
    metadata:
      labels:
        app: mysql-db
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secret-blue
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_DATABASE
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: django-config-blue
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: django-secret-blue
              key: MYSQL_PASSWORD
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
        command: ["--default-authentication-plugin=mysql_native_password"]
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-init
        configMap:
          name: mysql-init-config
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app: mysql-db
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
    name: mysql
  selector:
    app: mysql-db
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  labels:
    app: mysql-db
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-config
  labels:
    app: mysql-db
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS messaging_db;
    USE messaging_db;
    -- Add any additional initialization SQL here
