name: Django CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y default-libmysqlclient-dev build-essential pkg-config

    - name: Create virtual environment
      run: |
        python -m venv venv
        source venv/bin/activate
        python --version
        pip install --upgrade pip

    - name: Install Python dependencies
      run: |
        source venv/bin/activate
        cd messaging_app
        pip install -r requirements.txt
        pip install pytest pytest-django pytest-cov pytest-html mysqlclient

    - name: Wait for MySQL to be ready
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -uroot -proot --silent; do
          sleep 1
        done

    - name: Create test database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "CREATE DATABASE IF NOT EXISTS test_db;"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "GRANT ALL PRIVILEGES ON test_db.* TO 'test_user'@'%';"
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "FLUSH PRIVILEGES;"

    - name: Run Django tests
      env:
        DATABASE_URL: mysql://test_user:test_password@127.0.0.1:3306/test_db
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DEBUG: 'False'
        SECRET_KEY: test-secret-key-for-ci
      run: |
        source venv/bin/activate
        cd messaging_app
        python manage.py collectstatic --noinput
        python manage.py test --verbosity=2

    - name: Run pytest with coverage
      env:
        DATABASE_URL: mysql://test_user:test_password@127.0.0.1:3306/test_db
        DJANGO_SETTINGS_MODULE: messaging_app.settings
        DEBUG: 'False'
        SECRET_KEY: test-secret-key-for-ci
      run: |
        source venv/bin/activate
        cd messaging_app
        pytest --cov=. --cov-report=xml --cov-report=html --junitxml=test-results.xml --html=test-report.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./messaging_app/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          messaging_app/test-results.xml
          messaging_app/test-report.html
          messaging_app/htmlcov/
        retention-days: 30

    - name: Test summary
      if: always()
      run: |
        echo "=== Test Summary ==="
        echo "Python version: $(python --version)"
        echo "Django tests completed successfully!"
        echo "Coverage report generated"
        echo "Test artifacts uploaded"
