#!/bin/bash

# kurbeScript - Local Kubernetes Cluster Management Script
# Objective: Learn how to set up and use Kubernetes locally

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check minikube installation
check_minikube() {
    print_status "Checking if minikube is installed..."
    
    if command_exists minikube; then
        MINIKUBE_VERSION=$(minikube version --short)
        print_success "minikube is installed: $MINIKUBE_VERSION"
        return 0
    else
        print_error "minikube is not installed!"
        print_status "Please install minikube first:"
        echo "  macOS: brew install minikube"
        echo "  Linux: curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && sudo install minikube-linux-amd64 /usr/local/bin/minikube"
        echo "  Windows: choco install minikube"
        return 1
    fi
}

# Function to check kubectl installation
check_kubectl() {
    print_status "Checking if kubectl is installed..."
    
    if command_exists kubectl; then
        KUBECTL_VERSION=$(kubectl version --client --short)
        print_success "kubectl is installed: $KUBECTL_VERSION"
        return 0
    else
        print_error "kubectl is not installed!"
        print_status "Please install kubectl first:"
        echo "  macOS: brew install kubectl"
        echo "  Linux: curl -LO https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl && sudo install kubectl /usr/local/bin/"
        echo "  Windows: choco install kubernetes-cli"
        return 1
    fi
}

# Function to start Kubernetes cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with minikube..."
    
    # Check if cluster is already running
    if minikube status | grep -q "Running"; then
        print_warning "Cluster is already running!"
        return 0
    fi
    
    # Start the cluster
    print_status "Starting minikube cluster (this may take a few minutes)..."
    minikube start --driver=docker --memory=4096 --cpus=2
    
    if [ $? -eq 0 ]; then
        print_success "Kubernetes cluster started successfully!"
    else
        print_error "Failed to start Kubernetes cluster!"
        return 1
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying that the cluster is running..."
    
    # Check cluster info
    print_status "Getting cluster information..."
    kubectl cluster-info
    
    # Check cluster status
    print_status "Checking cluster status..."
    minikube status
    
    # Check nodes
    print_status "Checking cluster nodes..."
    kubectl get nodes
    
    print_success "Cluster verification completed!"
}

# Function to retrieve available pods
get_pods() {
    print_status "Retrieving available pods..."
    
    # Get all pods in all namespaces
    print_status "Pods in all namespaces:"
    kubectl get pods --all-namespaces
    
    # Get pods in default namespace
    print_status "Pods in default namespace:"
    kubectl get pods
    
    # Get detailed pod information
    print_status "Detailed pod information:"
    kubectl describe pods
}

# Function to show cluster dashboard
show_dashboard() {
    print_status "Opening Kubernetes dashboard..."
    
    if minikube status | grep -q "Running"; then
        print_status "Starting dashboard (this will open in your browser)..."
        minikube dashboard
    else
        print_error "Cluster is not running. Please start the cluster first."
    fi
}

# Function to stop cluster
stop_cluster() {
    print_status "Stopping Kubernetes cluster..."
    minikube stop
    print_success "Cluster stopped successfully!"
}

# Function to delete cluster
delete_cluster() {
    print_status "Deleting Kubernetes cluster..."
    minikube delete
    print_success "Cluster deleted successfully!"
}

# Function to show help
show_help() {
    echo "kurbeScript - Local Kubernetes Cluster Management"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  start       Start the Kubernetes cluster"
    echo "  verify      Verify the cluster is running"
    echo "  pods        Retrieve available pods"
    echo "  dashboard   Open the Kubernetes dashboard"
    echo "  stop        Stop the cluster"
    echo "  delete      Delete the cluster"
    echo "  status      Show cluster status"
    echo "  help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 start     # Start the cluster"
    echo "  $0 verify    # Verify cluster status"
    echo "  $0 pods      # Get all pods"
    echo "  $0           # Run full setup and verification"
}

# Function to show cluster status
show_status() {
    print_status "Current cluster status:"
    minikube status
}

# Main execution
main() {
    echo "=========================================="
    echo "    kurbeScript - Kubernetes Setup"
    echo "=========================================="
    echo ""
    
    # Check prerequisites
    if ! check_minikube; then
        exit 1
    fi
    
    if ! check_kubectl; then
        exit 1
    fi
    
    # Handle command line arguments
    case "${1:-}" in
        "start")
            start_cluster
            ;;
        "verify")
            verify_cluster
            ;;
        "pods")
            get_pods
            ;;
        "dashboard")
            show_dashboard
            ;;
        "stop")
            stop_cluster
            ;;
        "delete")
            delete_cluster
            ;;
        "status")
            show_status
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        "")
            # No arguments - run full setup
            print_status "Running full Kubernetes setup and verification..."
            start_cluster
            verify_cluster
            get_pods
            print_success "Setup completed successfully!"
            print_status "Use '$0 dashboard' to open the Kubernetes dashboard"
            print_status "Use '$0 help' for more commands"
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
