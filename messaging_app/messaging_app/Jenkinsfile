pipeline {
    agent any
    
    environment {
        PYTHON_VERSION = '3.9'
        VENV_NAME = 'venv'
        PROJECT_DIR = 'messaging_app'
        DOCKER_IMAGE_NAME = 'yourusername/messaging-app'
        DOCKER_TAG = 'latest'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code from GitHub...'
                git branch: 'main', 
                    credentialsId: 'github-credentials',
                    url: 'https://github.com/yourusername/messaging_app.git'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo 'Setting up Python virtual environment...'
                sh '''
                    python3 -m venv ${VENV_NAME}
                    source ${VENV_NAME}/bin/activate
                    python --version
                    pip3 install --upgrade pip
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                sh '''
                    source ${VENV_NAME}/bin/activate
                    cd ${PROJECT_DIR}
                    pip3 install -r messaging_app/requirements.txt
                    pip3 install pytest pytest-django pytest-cov pytest-html
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo 'Running tests with pytest...'
                sh '''
                    source ${VENV_NAME}/bin/activate
                    cd ${PROJECT_DIR}
                    python manage.py collectstatic --noinput
                    python manage.py test --verbosity=2
                    pytest --cov=. --cov-report=html --cov-report=xml --junitxml=test-results.xml --html=test-report.html
                '''
            }
        }
        
        stage('Generate Test Report') {
            steps {
                echo 'Generating test reports...'
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app/htmlcov',
                    reportFiles: 'index.html',
                    reportName: 'Coverage Report'
                ])
                
                publishHTML([
                    allowMissing: false,
                    alwaysLinkToLastBuild: true,
                    keepAll: true,
                    reportDir: 'messaging_app',
                    reportFiles: 'test-report.html',
                    reportName: 'Test Report'
                ])
                
                publishTestResults testResultsPattern: '**/test-results.xml'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                script {
                    docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}")
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                        docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}").push()
                        docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_TAG}").push("${env.BUILD_NUMBER}")
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                echo 'Cleaning up...'
                sh '''
                    rm -rf ${VENV_NAME}
                    rm -f ${PROJECT_DIR}/test-results.xml
                    rm -f ${PROJECT_DIR}/test-report.html
                    rm -rf ${PROJECT_DIR}/htmlcov
                '''
                script {
                    sh "docker rmi ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} || true"
                    sh "docker rmi ${DOCKER_IMAGE_NAME}:${env.BUILD_NUMBER} || true"
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
